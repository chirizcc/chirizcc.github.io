[{"categories":["技术"],"content":"博客搭建 ","date":"2021-02-24","objectID":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:0:0","tags":["blog"],"title":"博客搭建","uri":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["技术"],"content":"简介 参加工作几年来，一直未养成写博客的习惯，这其实是不利于个人发展的，所以我打算从现在开始养成这个习惯，记录自己的工作、生活、学习等。写博客，首先得有个博客，在 Hexo、Hugo、VuePress 中，最终选择了 Hugo 来搭建博客，并选择了 LoveIt 主题。 ","date":"2021-02-24","objectID":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:1:0","tags":["blog"],"title":"博客搭建","uri":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["技术"],"content":"准备工作 Hugo 提供了两种安装方式，二进制安装与源码安装。我的开发环境为 macOS，便直接使用 Homebrew 安装了 Hugo 的二进制包： brew install hugo 校验安装是否成功： $ hugo version Hugo Static Site Generator v0.80.0/extended darwin/amd64 BuildDate: unknown 可以看出安装的版本为 v0.80.0/extended。 ","date":"2021-02-24","objectID":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:2:0","tags":["blog"],"title":"博客搭建","uri":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["技术"],"content":"开始搭建 ","date":"2021-02-24","objectID":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:3:0","tags":["blog"],"title":"博客搭建","uri":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["技术"],"content":"创建站点 使用 Hugo 生成站点： hugo new site blog 这样便在当前目录下生成了 blog 文件夹，里面为博客项目的初始内容。 ","date":"2021-02-24","objectID":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:3:1","tags":["blog"],"title":"博客搭建","uri":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["技术"],"content":"创建文章 首先进入博客项目： cd blog 创建第一个文章： hugo new posts/first.md first.md 自动生成到了 content/posts/first.md ，打开 first.md 内容如下： --- title: \"First\" date: 2021-02-22T11:13:31+08:00 draft: true --- 这里生成的为前置参数，下方可正常书写 Markdown 内容，Hugo 支持的前置参数见 Front Matter，一些主题也会有扩展的前置参数，具体看各主题的文档。 ","date":"2021-02-24","objectID":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:3:2","tags":["blog"],"title":"博客搭建","uri":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["技术"],"content":"安装主题 Hugo 生成的初始站点没有默认主题，需要先安装主题，这里按照的是 LoveIt 主题。安装主题很简单，只需要将主题的文件放置到 themes 目录下即可，但是为了方便管理，这里先初始化站点为 git 仓库，并将主题作为子模块： git init git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt ","date":"2021-02-24","objectID":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:3:3","tags":["blog"],"title":"博客搭建","uri":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["技术"],"content":"基础配置 取 LoveIt 主题的 2.3 基础配置 覆盖 config.toml，内容如下： baseURL = \"http://example.org/\" # [en, zh-cn, fr, ...] 设置默认的语言 defaultContentLanguage = \"zh-cn\" # 网站语言, 仅在这里 CN 大写 languageCode = \"zh-CN\" # 是否包括中日韩文字 hasCJKLanguage = true # 网站标题 title = \"我的全新 Hugo 网站\" # 更改使用 Hugo 构建网站时使用的默认主题 theme = \"LoveIt\" [params] # LoveIt 主题版本 version = \"0.2.X\" [menu] [[menu.main]] identifier = \"posts\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" name = \"文章\" url = \"/posts/\" # 当你将鼠标悬停在此菜单链接上时, 将显示的标题 title = \"\" weight = 1 [[menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" weight = 2 [[menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" weight = 3 # Hugo 解析文档的配置 [markup] # 语法高亮设置 (https://gohugo.io/content-management/syntax-highlighting) [markup.highlight] # false 是必要的设置 (https://github.com/dillonzq/LoveIt/issues/158) noClasses = false ","date":"2021-02-24","objectID":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:3:4","tags":["blog"],"title":"博客搭建","uri":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["技术"],"content":"本地启动网站 使用以下命令启动网站: hugo serve 去查看 http://localhost:1313。 技巧 当你运行 hugo serve 时, 当文件内容更改时, 页面会随着更改自动刷新. 注意 由于本主题使用了 Hugo 中的 .Scratch 来实现一些特性, 非常建议你为 hugo server 命令添加 --disableFastRender 参数来实时预览你正在编辑的文章页面. hugo serve --disableFastRender 注意 默认情况下, 所有文章和页面均作为草稿创建. 如果想要渲染这些页面, 请从元数据中删除属性 draft: true, 设置属性 draft: false 或者为 hugo 命令添加 -D/--buildDrafts 参数. 根据以上提示，本地推荐的启动命令为： hugo serve --disableFastRender -D 至此，博客的本地搭建基本完成，以下为扩展配置以开启更多的功能。 ","date":"2021-02-24","objectID":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:3:5","tags":["blog"],"title":"博客搭建","uri":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["技术"],"content":"搜索功能 LoveIt 主题支持的搜索引擎为 Lunr.js 与 algolia。以下是两种搜索引擎的对比: 两种搜索引擎的对比 lunr: 简单, 无需同步 index.json, 没有 contentLength 的限制, 但占用带宽大且性能低 (特别是中文需要一个较大的分词依赖库) algolia: 高性能并且占用带宽低, 但需要同步 index.json 且有 contentLength 的限制 这里为了方便先采用了 lunr，后续会变更为 algolia。 输出配置 使用搜索需要 Hugo 生成 index.json，在 config.toml 配置文件中添加 JSON 输出文件类型到 outputs 部分的 home 字段中，后续在构建时即可生成 index.json： [outputs] home = [\"HTML\", \"RSS\", \"JSON\"] 搜索配置 在 config.toml 配置文件中添加搜索相关配置： [params.search] enable = true # 搜索引擎的类型 (\"lunr\", \"algolia\") type = \"lunr\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # LoveIt 新增 | 0.2.1 最大结果数目 maxResultLength = 10 # LoveIt 新增 | 0.2.3 结果内容片段长度 snippetLength = 50 # LoveIt 新增 | 0.2.1 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # LoveIt 新增 | 0.2.4 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false ","date":"2021-02-24","objectID":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:3:6","tags":["blog"],"title":"博客搭建","uri":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["技术"],"content":"评论功能 LoveIt 主题支持的评论系统有 Disqus、Gitalk、Valine、Facebook 评论系统、Telegram Comments、Commento、Utterances。这里选择了 Valine 作为博客的评论系统。 在 config.toml 配置文件中添加评论相关配置： [params.page.comment] enable = true # Valine 评论系统设置 [params.page.comment.valine] enable = true appId = \"\" appKey = \"\" placeholder = \"\" avatar = \"monsterid\" # meta= \"\" pageSize = 10 # lang = \"\" visitor = true recordIP = true highlight = true enableQQ = false # serverURLs = \"\" # LoveIt 新增 | 0.2.6 emoji 数据文件名称, 默认是 \"google.yml\" # (\"apple.yml\", \"google.yml\", \"facebook.yml\", \"twitter.yml\") # 位于 \"themes/LoveIt/assets/data/emoji/\" 目录 # 可以在你的项目下相同路径存放你自己的数据文件: # \"assets/data/emoji/\" # emoji = \"\" 根据 获取APP ID 和 APP Key 获取到 appId 及 appKey，并填写入配置文件中，即可为博客开启评论功能。 Valine 如果需要邮件提醒、垃圾评论过滤等功能，可以借助 Valine-Admin 来实现。 Hugo 的运行环境 hugo serve 的默认运行环境是 development, 而 hugo 的默认运行环境是 production. 由于本地 development 环境的限制, 评论系统, CDN 和 fingerprint 不会在 development 环境下启用. 可以使用 hugo serve -e production 命令来开启这些特性. ","date":"2021-02-24","objectID":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:3:7","tags":["blog"],"title":"博客搭建","uri":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["技术"],"content":"部署 Hugo 生成出来的是静态页面，可以将生成出来的博客部署到 Github Pages 上进行托管，并使用 Github Actions 进行自动化部署。 由于 config.toml 中包含 appId 等敏感信息，博客源码并不适合作为公开项目，而免费版的 Github Pages 则必须要是公开项目才行，所以拆分为两个项目 blog 与 chirizcc.github.io。blog 为博客源码的私有项目，chirizcc.github.io 为用于 Github Pages 部署的公开项目。 注意 chirizcc 为我的 Github 用户名，请勿与我一致。 ","date":"2021-02-24","objectID":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:4:0","tags":["blog"],"title":"博客搭建","uri":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["技术"],"content":"配置 Github Actions 在 blog 项目创建 Github Actions 配置文件 .github/workflows/gh-pages.yml，内容如下： name:github pageson:push:branches:- main# Set a branch to deployjobs:deploy:runs-on:ubuntu-18.04steps:- uses:actions/checkout@v2with:submodules:true# Fetch Hugo themes (true OR recursive)fetch-depth:0# Fetch all history for .GitInfo and .Lastmod- name:Setup Hugouses:peaceiris/actions-hugo@v2with:hugo-version:\"0.80.0\"# Hugo 版本extended:true# extended 版本- name:Buildrun:hugo --minify- name:Deployuses:peaceiris/actions-gh-pages@v3with:personal_token:${{ secrets.PERSONAL_TOKEN }}external_repository:chirizcc/chirizcc.github.io# 用于 Github Pages 部署的项目publish_branch: gh-pages # default:gh-pagespublish_dir:./public由于需要部署到另一个项目中，所以需要用到 repo（仓库） 权限的 个人访问令牌 即 personal_token，创建个人访问令牌的具体步骤见 创建个人访问令牌 。 创建了 个人访问令牌 并将其配置到 blog 项目的的 Actions secrets 中之后，将项目推送到 GitHub，GitHub Actions 便会自动运行，运行成功后便会将构建产物发布到 chirizcc.github.io 项目中。 此时博客就部署完毕了，可以访问 https://chirizcc.github.io 访问博客了。 ","date":"2021-02-24","objectID":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:4:1","tags":["blog"],"title":"博客搭建","uri":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["技术"],"content":"自定义域名 Github Pages 的默认访问地址为 https://{username}.github.io 且访问速度较慢，所以这里将配置自定义域名并借助 Cloudflare 进行加速。 注意 我这里配置的自定义域名未 chirizcc.cc 在 Cloudflare 控制台里添加站点，并配置 DNS 解析到 Github 的 IP: 185.199.108.153 185.199.109.153 185.199.110.153 185.199.111.153 修改 Github Actions 的 Deploy action 以添加 CNAME 文件： - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: personal_token: ${{ secrets.PERSONAL_TOKEN }} external_repository: chirizcc/chirizcc.github.io publish_branch: gh-pages # default: gh-pages publish_dir: ./public cname: chirizcc.cc # 添加 CNAME 文件 到这里整个博客的搭建便算是完成了，可以访问 https://chirizcc.cc 浏览博客了。 ","date":"2021-02-24","objectID":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:4:2","tags":["blog"],"title":"博客搭建","uri":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":["技术"],"content":"后续 整个博客已经搭建完毕了，后续需要编写博客且不需要本地预览时，并不需要安装 Hugo，只需要 Clone blog 项目，并将博客文章文件放置到 content/posts 里，并推送到 Github 上，便可自动部署并更新。 ","date":"2021-02-24","objectID":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/:5:0","tags":["blog"],"title":"博客搭建","uri":"/posts/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"categories":null,"content":"about @TODO 自我介绍 ","date":"2021-02-22","objectID":"/about/:0:0","tags":null,"title":"About","uri":"/about/"}]